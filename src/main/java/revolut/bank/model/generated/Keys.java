/*
 * This file is generated by jOOQ.
 */
package revolut.bank.model.generated;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import revolut.bank.model.generated.tables.Account;
import revolut.bank.model.generated.tables.Organization;
import revolut.bank.model.generated.tables.Party;
import revolut.bank.model.generated.tables.PartyType;
import revolut.bank.model.generated.tables.Person;
import revolut.bank.model.generated.tables.Transfer;
import revolut.bank.model.generated.tables.records.AccountRecord;
import revolut.bank.model.generated.tables.records.OrganizationRecord;
import revolut.bank.model.generated.tables.records.PartyRecord;
import revolut.bank.model.generated.tables.records.PartyTypeRecord;
import revolut.bank.model.generated.tables.records.PersonRecord;
import revolut.bank.model.generated.tables.records.TransferRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>PUBLIC</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<PartyRecord, Long> IDENTITY_PARTY = Identities0.IDENTITY_PARTY;
    public static final Identity<PartyTypeRecord, Long> IDENTITY_PARTY_TYPE = Identities0.IDENTITY_PARTY_TYPE;
    public static final Identity<TransferRecord, Long> IDENTITY_TRANSFER = Identities0.IDENTITY_TRANSFER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> PK_ACCOUNT = UniqueKeys0.PK_ACCOUNT;
    public static final UniqueKey<OrganizationRecord> PK_ORGANIZATION = UniqueKeys0.PK_ORGANIZATION;
    public static final UniqueKey<PartyRecord> PK_PARTY = UniqueKeys0.PK_PARTY;
    public static final UniqueKey<PartyTypeRecord> PK_PARTY_TYPE = UniqueKeys0.PK_PARTY_TYPE;
    public static final UniqueKey<PersonRecord> PK_PERSON = UniqueKeys0.PK_PERSON;
    public static final UniqueKey<TransferRecord> PK_TRANSFER = UniqueKeys0.PK_TRANSFER;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, PartyRecord> FK_ACCOUNT_PARTY = ForeignKeys0.FK_ACCOUNT_PARTY;
    public static final ForeignKey<OrganizationRecord, PartyRecord> FK_ORGANIZATION_PARTY = ForeignKeys0.FK_ORGANIZATION_PARTY;
    public static final ForeignKey<PartyRecord, PartyTypeRecord> FK_PARTY_PARTY_TYPE = ForeignKeys0.FK_PARTY_PARTY_TYPE;
    public static final ForeignKey<PersonRecord, PartyRecord> FK_PERSON_PARTY = ForeignKeys0.FK_PERSON_PARTY;
    public static final ForeignKey<TransferRecord, AccountRecord> FK_TRANSFER_ACCOUNT_FROM = ForeignKeys0.FK_TRANSFER_ACCOUNT_FROM;
    public static final ForeignKey<TransferRecord, AccountRecord> FK_TRANSFER_ACCOUNT_TO = ForeignKeys0.FK_TRANSFER_ACCOUNT_TO;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<PartyRecord, Long> IDENTITY_PARTY = Internal.createIdentity(Party.PARTY, Party.PARTY.ID);
        public static Identity<PartyTypeRecord, Long> IDENTITY_PARTY_TYPE = Internal.createIdentity(PartyType.PARTY_TYPE, PartyType.PARTY_TYPE.ID);
        public static Identity<TransferRecord, Long> IDENTITY_TRANSFER = Internal.createIdentity(Transfer.TRANSFER, Transfer.TRANSFER.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> PK_ACCOUNT = Internal.createUniqueKey(Account.ACCOUNT, "PK_ACCOUNT", Account.ACCOUNT.NUMBER);
        public static final UniqueKey<OrganizationRecord> PK_ORGANIZATION = Internal.createUniqueKey(Organization.ORGANIZATION, "PK_ORGANIZATION", Organization.ORGANIZATION.PARTY_ID);
        public static final UniqueKey<PartyRecord> PK_PARTY = Internal.createUniqueKey(Party.PARTY, "PK_PARTY", Party.PARTY.ID);
        public static final UniqueKey<PartyTypeRecord> PK_PARTY_TYPE = Internal.createUniqueKey(PartyType.PARTY_TYPE, "PK_PARTY_TYPE", PartyType.PARTY_TYPE.ID);
        public static final UniqueKey<PersonRecord> PK_PERSON = Internal.createUniqueKey(Person.PERSON, "PK_PERSON", Person.PERSON.PARTY_ID);
        public static final UniqueKey<TransferRecord> PK_TRANSFER = Internal.createUniqueKey(Transfer.TRANSFER, "PK_TRANSFER", Transfer.TRANSFER.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AccountRecord, PartyRecord> FK_ACCOUNT_PARTY = Internal.createForeignKey(revolut.bank.model.generated.Keys.PK_PARTY, Account.ACCOUNT, "FK_ACCOUNT_PARTY", Account.ACCOUNT.PARTY_ID);
        public static final ForeignKey<OrganizationRecord, PartyRecord> FK_ORGANIZATION_PARTY = Internal.createForeignKey(revolut.bank.model.generated.Keys.PK_PARTY, Organization.ORGANIZATION, "FK_ORGANIZATION_PARTY", Organization.ORGANIZATION.PARTY_ID);
        public static final ForeignKey<PartyRecord, PartyTypeRecord> FK_PARTY_PARTY_TYPE = Internal.createForeignKey(revolut.bank.model.generated.Keys.PK_PARTY_TYPE, Party.PARTY, "FK_PARTY_PARTY_TYPE", Party.PARTY.PARTY_TYPE_ID);
        public static final ForeignKey<PersonRecord, PartyRecord> FK_PERSON_PARTY = Internal.createForeignKey(revolut.bank.model.generated.Keys.PK_PARTY, Person.PERSON, "FK_PERSON_PARTY", Person.PERSON.PARTY_ID);
        public static final ForeignKey<TransferRecord, AccountRecord> FK_TRANSFER_ACCOUNT_FROM = Internal.createForeignKey(revolut.bank.model.generated.Keys.PK_ACCOUNT, Transfer.TRANSFER, "FK_TRANSFER_ACCOUNT_FROM", Transfer.TRANSFER.FROM_ACCOUNT_ID);
        public static final ForeignKey<TransferRecord, AccountRecord> FK_TRANSFER_ACCOUNT_TO = Internal.createForeignKey(revolut.bank.model.generated.Keys.PK_ACCOUNT, Transfer.TRANSFER, "FK_TRANSFER_ACCOUNT_TO", Transfer.TRANSFER.TO_ACCOUNT_ID);
    }
}
