/*
 * This file is generated by jOOQ.
 */
package revolut.bank.model.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import revolut.bank.model.generated.Indexes;
import revolut.bank.model.generated.Keys;
import revolut.bank.model.generated.Public;
import revolut.bank.model.generated.tables.records.TransferRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 1684573223;

    /**
     * The reference instance of <code>PUBLIC.TRANSFER</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>PUBLIC.TRANSFER.ID</code>.
     */
    public final TableField<TransferRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.FROM_ACCOUNT_ID</code>.
     */
    public final TableField<TransferRecord, String> FROM_ACCOUNT_ID = createField("FROM_ACCOUNT_ID", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.TO_ACCOUNT_ID</code>.
     */
    public final TableField<TransferRecord, String> TO_ACCOUNT_ID = createField("TO_ACCOUNT_ID", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.AMOUNT</code>.
     */
    public final TableField<TransferRecord, Long> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.STATE</code>.
     */
    public final TableField<TransferRecord, String> STATE = createField("STATE", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.TIMESTAMP</code>.
     */
    public final TableField<TransferRecord, Timestamp> TIMESTAMP = createField("TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP.precision(10).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer() {
        this(DSL.name("TRANSFER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7, Indexes.TRANSFER_FK0_INDEX_7, Indexes.TRANSFER_FK1_INDEX_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransferRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSFER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransferRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransferRecord, ?>>asList(Keys.TRANSFER_FK0, Keys.TRANSFER_FK1);
    }

    public Account transferFk0() {
        return new Account(this, Keys.TRANSFER_FK0);
    }

    public Account transferFk1() {
        return new Account(this, Keys.TRANSFER_FK1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }
}
